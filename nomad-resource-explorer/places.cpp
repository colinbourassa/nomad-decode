#include <stdint.h>
#include "places.h"
#include "imageconverter.h"

const uint8_t Places::s_planetTextureMapping[622] =
{
  0x00, 0x00, 0x00, 0x00, 0x07, 0x61, 0x0E, 0x61, 0x26, 0x61, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x61, 0x22, 0x61, 0x2F, 0x61, 0x07, 0x62,
  0x10, 0x64, 0x0F, 0x61, 0x10, 0x61, 0x0A, 0x61, 0x12, 0x61, 0x1A, 0x61,
  0x03, 0x61, 0x00, 0x00, 0x14, 0x61, 0x08, 0x61, 0x0D, 0x61, 0x24, 0x61,
  0x0D, 0x62, 0x2B, 0x61, 0x1D, 0x61, 0x00, 0x00, 0x2A, 0x61, 0x05, 0x61,
  0x20, 0x61, 0x2E, 0x61, 0x0D, 0x6F, 0x07, 0x63, 0x1C, 0x61, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0C, 0x61, 0x29, 0x61, 0x28, 0x61, 0x21, 0x61,
  0x0A, 0x62, 0x2B, 0x62, 0x2C, 0x61, 0x30, 0x61, 0x0A, 0x63, 0x2A, 0x62,
  0x0B, 0x61, 0x2F, 0x62, 0x1E, 0x61, 0x0F, 0x65, 0x2C, 0x62, 0x31, 0x61,
  0x0D, 0x64, 0x14, 0x62, 0x0D, 0x63, 0x2E, 0x62, 0x0A, 0x64, 0x2F, 0x63,
  0x1D, 0x66, 0x08, 0x62, 0x03, 0x62, 0x32, 0x61, 0x21, 0x62, 0x13, 0x6B,
  0x2B, 0x63, 0x22, 0x62, 0x21, 0x63, 0x00, 0x00, 0x14, 0x63, 0x20, 0x6A,
  0x0A, 0x65, 0x2A, 0x63, 0x2D, 0x61, 0x1F, 0x61, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x12, 0x62, 0x0E, 0x62, 0x1C, 0x62, 0x19, 0x61, 0x13, 0x61,
  0x14, 0x64, 0x0C, 0x64, 0x0D, 0x65, 0x0E, 0x63, 0x04, 0x64, 0x24, 0x62,
  0x11, 0x64, 0x22, 0x68, 0x0D, 0x66, 0x11, 0x65, 0x03, 0x63, 0x28, 0x62,
  0x20, 0x64, 0x1E, 0x62, 0x00, 0x00, 0x2B, 0x64, 0x0D, 0x67, 0x06, 0x61,
  0x0B, 0x62, 0x09, 0x61, 0x10, 0x64, 0x04, 0x62, 0x26, 0x62, 0x24, 0x64,
  0x18, 0x61, 0x19, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0x65, 0x06, 0x62, 0x12, 0x67, 0x20, 0x65, 0x09, 0x62, 0x0F, 0x63,
  0x23, 0x61, 0x0B, 0x63, 0x2F, 0x64, 0x20, 0x63, 0x32, 0x62, 0x0D, 0x70,
  0x18, 0x62, 0x05, 0x62, 0x13, 0x62, 0x0A, 0x66, 0x2A, 0x65, 0x28, 0x64,
  0x1C, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x67, 0x2F, 0x69,
  0x22, 0x63, 0x04, 0x63, 0x14, 0x66, 0x10, 0x66, 0x0E, 0x64, 0x0D, 0x68,
  0x30, 0x62, 0x20, 0x62, 0x10, 0x62, 0x14, 0x6D, 0x07, 0x65, 0x2B, 0x65,
  0x22, 0x68, 0x04, 0x65, 0x1B, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2A, 0x64, 0x21, 0x64, 0x0B, 0x65, 0x25, 0x61,
  0x1E, 0x63, 0x13, 0x63, 0x05, 0x65, 0x02, 0x61, 0x2D, 0x64, 0x13, 0x6C,
  0x27, 0x61, 0x22, 0x64, 0x2A, 0x63, 0x2B, 0x66, 0x21, 0x65, 0x1D, 0x62,
  0x0D, 0x69, 0x13, 0x64, 0x31, 0x67, 0x06, 0x63, 0x25, 0x62, 0x1E, 0x64,
  0x14, 0x67, 0x0C, 0x64, 0x30, 0x63, 0x09, 0x63, 0x26, 0x63, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2A, 0x64, 0x2B, 0x63, 0x23, 0x62, 0x12, 0x66,
  0x01, 0x63, 0x32, 0x63, 0x0D, 0x6A, 0x1F, 0x62, 0x24, 0x63, 0x1C, 0x65,
  0x1D, 0x63, 0x13, 0x65, 0x2F, 0x65, 0x2A, 0x65, 0x0F, 0x64, 0x19, 0x63,
  0x11, 0x63, 0x20, 0x67, 0x2E, 0x64, 0x1F, 0x63, 0x1D, 0x65, 0x2E, 0x65,
  0x0D, 0x6B, 0x0D, 0x6C, 0x21, 0x66, 0x31, 0x62, 0x20, 0x68, 0x2F, 0x66,
  0x25, 0x63, 0x1D, 0x65, 0x1B, 0x62, 0x13, 0x66, 0x2A, 0x66, 0x2B, 0x67,
  0x28, 0x63, 0x32, 0x64, 0x12, 0x63, 0x32, 0x66, 0x23, 0x65, 0x0E, 0x65,
  0x2B, 0x68, 0x14, 0x68, 0x2B, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2A, 0x65, 0x31, 0x63, 0x21, 0x67, 0x2F, 0x69,
  0x1F, 0x65, 0x06, 0x64, 0x2D, 0x62, 0x32, 0x65, 0x22, 0x65, 0x1C, 0x64,
  0x14, 0x69, 0x11, 0x62, 0x26, 0x64, 0x31, 0x64, 0x13, 0x67, 0x0C, 0x63,
  0x20, 0x69, 0x2F, 0x67, 0x2E, 0x66, 0x02, 0x62, 0x22, 0x66, 0x23, 0x63,
  0x2F, 0x6A, 0x1B, 0x63, 0x2B, 0x6A, 0x2E, 0x68, 0x2F, 0x68, 0x31, 0x65,
  0x27, 0x62, 0x0D, 0x6D, 0x13, 0x68, 0x14, 0x6A, 0x0C, 0x65, 0x1A, 0x62,
  0x13, 0x65, 0x2A, 0x67, 0x2B, 0x6A, 0x28, 0x64, 0x18, 0x63, 0x1F, 0x66,
  0x2E, 0x64, 0x12, 0x64, 0x04, 0x64, 0x2E, 0x68, 0x2D, 0x63, 0x23, 0x64,
  0x12, 0x65, 0x2B, 0x6B, 0x31, 0x66, 0x11, 0x61, 0x10, 0x63, 0x00, 0x00,
  0x2E, 0x69, 0x00, 0x00, 0x00, 0x61, 0x1D, 0x66, 0x2E, 0x65
};

Places::Places(DatLibrary& lib, Palette& pal) :
  m_lib(&lib),
  m_pal(&pal)
{

}

void Places::clear()
{
  m_placeList.clear();
}

void Places::populatePlaceList()
{
  QByteArray placedata;

  if (m_lib->getFileByName(DatFileType_CONVERSE, "PLACE.TAB", placedata))
  {
    const uint8_t* rawdata = reinterpret_cast<const uint8_t*>(placedata.data());
    unsigned int offset = 0;
    int id = 0;

    while (offset <= (placedata.size() - sizeof(PlaceTableEntry)))
    {
      const PlaceTableEntry* currentEntry = reinterpret_cast<const PlaceTableEntry*>(rawdata + offset);

      // the object is only valid if the name offset into GAMETEXT.TXT is not 0xFFFF
      if (currentEntry->nameOffset != 0xFFFF)
      {
        Place p;
        p.id = id;
        p.name = m_lib->getGameText(currentEntry->nameOffset);
        p.representativeId = currentEntry->planetRepId;
        //p.knownByPlayer = (currentEntry->flags & 0x04);

        if (!p.name.isEmpty())
        {
          m_placeList.insert(id,p);
        }
      }
      offset += sizeof(PlaceTableEntry);
      id++;
    }
  }
}

QMap<int,Place> Places::getPlaceList()
{
  return m_placeList;
}

QPixmap Places::getPlaceSurfaceImage(int id, bool& status)
{
  const uint8_t baseNum = s_planetTextureMapping[id * 2];
  const unsigned char palLetter = s_planetTextureMapping[id * 2 + 1];

  const QString plnFilename = QString("WORLD%1a.pln").arg(baseNum, 2, 10, QChar('0'));
  const QString palFilename = QString("WORLD%1%2.pal").arg(baseNum, 2, 10, QChar('0')).arg(palLetter);

  QByteArray plnFile;
  const QVector<QRgb> palFile = m_pal->paletteByName(DatFileType_TEST, palFilename);
  m_lib->getFileByName(DatFileType_TEST, plnFilename, plnFile);

  return ImageConverter::plnToPixmap(plnFile, palFile, status);
}
